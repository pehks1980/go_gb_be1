swagger: '2.0'
info:
  title: Shop API
  description: Shop API v1
  license:
    name: BSD License
  version: v1
host: '127.0.0.1:8000'
schemes:
  - http
basePath: /api/v1
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
 api_key:
   type: "apiKey"
   name: "api_key"
   in: "header"
   description: 'Format: \<token\>'


paths:
  '/orders/':
    post:
      operationId: order create view
      description: ''
      parameters:
        - name: data
          in: body
          required: true
          schema:
           $ref: '#/definitions/Order'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: ''
          schema:
            required:
              - errors
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      title: Code
                      description: error code
                      type: integer
                      readOnly: true
                    message:
                      title: Message
                      description: error message
                      type: string
                      readOnly: true
                      minLength: 1
      security:
        - api_key: []
      tags:
        - Order
    parameters: []
  '/orders/all/':
    get:
      operationId: order list view
      description: ''
      parameters:
        - name: date
          in: query
          description: <timestamp>
          required: true
          type: integer
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              date:
                type: array
                items:
                  $ref: "#/definitions/Order"
                readOnly: true
        '400':
          description: ''
          schema:
            required:
              - errors
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      title: Code
                      description: error code
                      type: integer
                      readOnly: true
                    message:
                      title: Message
                      description: error message
                      type: string
                      readOnly: true
                      minLength: 1
      security:
       - api_key: []
      tags:
        - Order
    parameters: []
  '/orders/{id}/':
    put:
      operationId: order update view
      description: ''
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        '200':
          description: task update success
        '400':
          description: ''
          schema:
            required:
              - errors
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      title: Code
                      description: error code
                      type: integer
                      readOnly: true
                    message:
                      title: Message
                      description: error message
                      type: string
                      readOnly: true
                      minLength: 1
      security:
       - api_key: []
      tags:
        - Order
    delete:
      operationId: task delete view
      description: ''
      parameters: []
      responses:
        '200':
          description: task delete success
        '400':
          description: ''
          schema:
            required:
              - errors
            type: object
            properties:
              errors:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      title: Code
                      description: error code
                      type: integer
                      readOnly: true
                    message:
                      title: Message
                      description: error message
                      type: string
                      readOnly: true
                      minLength: 1
      tags:
        - Order
    parameters:
      - name: id
        in: path
        required: true
        type: integer
        format: int64
        
  '/user/logout/':
    post:
      operationId: logoutUser
      description: 'Logs out current logged in user session'
      parameters: []
      responses:
        '200':
          description: user logout success
      tags:
        - User
    parameters: []
  '/user/login/':
    post:
      operationId: loginUser
      description: 'Logs in user'
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        #schema:
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        #schema:
        type: string
      responses:
        '200':
          description: user login success
        '400':
          description: Invalid username/password supplied
      tags:
        - User
    parameters: []
    
  '/items/':
   post:
     summary: "Add a new item to the store"
     operationId: "CreateItem"
     consumes:
     - "application/json"
     produces:
     - "application/json"
     parameters:
     - in: "body"
       name: "body"
       description: "Item object that needs to be added to the store"
       required: true
       schema:
         $ref: "#/definitions/Item"
     responses:
       "405":
         description: "Invalid input"
     security:
     - api_key: []
     tags:
        - Items 
  '/items/upload_image/':
   post:
     summary: "uploads an image"
     operationId: "uploadFile"
     consumes:
     - "multipart/form-data"
     produces:
     - "application/json"
     parameters:
     - name: "additionalMetadata"
       in: "formData"
       description: "Additional data to pass to server"
       required: true
       type: "string"
     - name: "file"
       in: "formData"
       description: "file to upload"
       required: true
       type: "file"
     responses:
      "405":
         description: "Invalid input"
     security:
     - api_key: []
     tags:
        - Items 
  '/items/{itemId}':
   get:
     summary: Find item by ID
     operationId: GetItem
     parameters:
     - name: itemId
       in: path
       description: ID of item to return
       required: true
       type: integer
       format: int64
     responses:
      "200":
        description: successful operation
        schema:
         $ref: '#/definitions/Item'
      "400":
        description: Invalid ID supplied
     tags:
        - Items 
   put:
     summary: Updates a item in the store with form data
     operationId: UpdateItem
     consumes:
     - "application/json"
     produces:
     - "application/json"
     parameters:
     - name: itemId
       in: path
       description: ID of item that needs to be updated
       required: true
       type: integer
       format: int64
     - in: "body"
       name: "body"
       description: "Item object that needs to be added to the store"
       required: true
       schema:
        type: object
        properties:
          name:
           type: string
           description: Updated name of the item
          status:
           type: string
           description: Updated status of the item
     responses:
       405:
         description: Invalid input
     security:
     - api_key: []
     tags:
        - Items
   delete:
     summary: Deletes a item
     operationId: DeleteItem
     parameters:
     - name: itemId
       in: path
       description: Item id to delete
       required: true
       type: integer
       format: int64
     responses:
       400:
         description: Invalid ID supplied
       404:
         description: Item not found
     security:
     - api_key: []
     tags:
        - Items
  '/items/filter/':
   get:
     summary: Lists Items with filters
     operationId: ListItems
     parameters:
     - name: price_min
       in: query
       description: Lower price limit
       required: false
       type: integer
       format: int64
     - name: price_max
       in: query
       description: Upper price limit
       required: false
       type: integer
       format: int64
     responses:
      200:
        description: 'successful operation'
        schema:
          type: array
          items:
           $ref: '#/definitions/Item'
      400:
         description: Invalid price range
     tags:
        - Items 

definitions:

  User:
    type: object
    properties:
      id:
       type: integer
       format: int64
      email:
       type: string
      password:
       type: string

  Item:
   type: object
   properties:
    id:
     type: integer
     format: int64
    name:
     type: string
    description:
     type: string
    price:
     type: integer 
     format: int64 
    image_link:
     type: string

  Order:
   type: object
   properties:
    id:
     type: integer
     format: int64
    number:
      title: Нумер заказа
      type: string
    status:
      title: Cтатус заказа
      type: string
      enum:
        - 'Создан'
        - 'Собран'
        - 'В пути'
        - 'Доставлен'
        - 'Завершен'
    createDate:
      title: Создан
      type: string
      format: date-time
      x-nullable: true
    description:
     type: string
    itemslist:
     type: array
     items:
       $ref: '#/definitions/Item'
    totalOrder:
      type: integer
      format: int64
    
